[project]
name = "smtp-gateway"
version = "0.1.0"
description = "High-performance SMTP gateway that bridges SMTP clients to Cakemail Email API"
authors = [
    {name = "Cakemail Team", email = "devops@cakemail.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["smtp", "email", "gateway", "cakemail", "api", "async"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: AsyncIO",
]

dependencies = [
    "aiosmtpd>=1.4.4",
    "httpx>=0.24.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "structlog>=23.1.0",
    "prometheus-client>=0.17.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.1.0",
    "respx>=0.20.0",
    "black>=23.7.0",
    "ruff>=0.0.280",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.1.0",
    "respx>=0.20.0",
]
load = [
    "locust>=2.15.0",
]

[project.scripts]
smtp-gateway = "smtp_gateway.__main__:main"

[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit (security)
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
]
ignore = [
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "COM812", # Trailing comma missing (conflicts with black)
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--cov=smtp_gateway",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "-v",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "slow: Slow-running tests",
]
timeout = 30

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "**/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
